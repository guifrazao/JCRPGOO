from Modulos import *  # Importa todas as classes e fun√ß√µes do m√≥dulo Modulos


def obter_valor(mensagem, tipo, validar_funcao):
    while True:
        try:
            valor = tipo(input(mensagem))
            if validar_funcao(valor):
                return valor
            else:
                print(f"‚ö†Ô∏è Valor inv√°lido para {mensagem.strip(': ')}. Tente novamente.")
        except ValueError:
            print(f"‚ö†Ô∏è Entrada inv√°lida. Por favor, insira um valor {tipo.__name__}.")


def criar_proprietario(validator_owner):
    nome = obter_valor("Digite o nome do propriet√°rio: ", str, validator_owner.verifyName)
    cpf = obter_valor("Digite o CPF do propriet√°rio (11 d√≠gitos): ", str, validator_owner.verifyCPF)
    tel = obter_valor("Digite o telefone do propriet√°rio com DDD (11 d√≠gitos): ", str, validator_owner.verifyTel)
    return Owner(nome, cpf, tel)


def criar_invoice(validator_invoice, proprietario):
    item_number = obter_valor("Digite o ID do produto (5 a 8 d√≠gitos): ", int, validator_invoice.verifyItem_number)
    description = input("Digite a descri√ß√£o do produto: ")
    quantity = obter_valor("Digite a quantidade de produtos: ", int, validator_invoice.verifyQuantity)
    price_per_item = obter_valor("Digite o pre√ßo unit√°rio do produto: R$", float, validator_invoice.verifyPrice)
    return Invoice(item_number, description, quantity, price_per_item, proprietario)


def menu():
    validator_invoice = Validator_invoice()
    validator_owner = Validator_Owner()
    proprietario = None
    faturas = []

    while True:
        print("\n" + "=" * 50)
        print(" " * 12 + "‚ú¶ MENU PRINCIPAL ‚ú¶")
        print("=" * 50)
        print("1Ô∏è‚É£  Criar Propriet√°rio")
        print("2Ô∏è‚É£  Criar Fatura (associar com propriet√°rio existente)")
        print("3Ô∏è‚É£  Mostrar Informa√ß√µes da(s) Fatura(s)")
        print("4Ô∏è‚É£  Sair")
        print("=" * 50)

        escolha = input("Digite sua escolha: ").strip()

        if escolha == '1':
            proprietario = criar_proprietario(validator_owner)
            print("‚úîÔ∏è Propriet√°rio criado com sucesso.")
        elif escolha == '2':
            if proprietario is None:
                print("‚ö†Ô∏è Primeiro, crie um propriet√°rio para associar a fatura.")
            else:
                fatura = criar_invoice(validator_invoice, proprietario)
                faturas.append(fatura)
                print("‚úîÔ∏è Fatura criada e associada ao propriet√°rio com sucesso.")
        elif escolha == '3':
            if not faturas:
                print("‚ö†Ô∏è Nenhuma fatura dispon√≠vel.")
            else:
                print("\n" + "=" * 50)
                print(" " * 12 + "‚ú¶ INFORMA√á√ïES DAS FATURAS ‚ú¶")
                print("=" * 50)
                for index, fatura in enumerate(faturas):
                    print(f"\nüìÑ Fatura {index + 1}:")
                    print(fatura)
                    total = fatura.calculate_total()
                    print(f"üí∞ Valor total da fatura: R${total:.2f}")
                print("=" * 50)
        elif escolha == '4':
            print("üëã Saindo...")
            break
        else:
            print("‚ùå Escolha inv√°lida. Tente novamente.")


def main():
    menu()

main()
